rm(ctrl.ratio_PCA_m)
cdata_i <- as.data.frame(2^exprs(batchcl_raw_dataE))
names(cdata_i) <- paste0("batchcl_raw_signal_sum_", names(cdata_i))
cdata_i$gene_name <- rownames(cdata_i)
cdata <- left_join(cdata, cdata_i)
rm(cdata_i)
cdata_i <- as.data.frame(2^exprs(norm_batchcl_raw_dataE))
names(cdata_i) <- paste0("norm_batchcl_raw_signal_sum_", names(cdata_i))
cdata_i$gene_name <- rownames(cdata_i)
cdata <- left_join(cdata, cdata_i)
rm(cdata_i)
cdata_i <- as.data.frame(2^exprs(ctrl.ratio_dataE))
names(cdata_i) <- paste0("ctrl.ratio_", names(cdata_i))
cdata_i$gene_name <- rownames(cdata_i)
cdata <- left_join(cdata, cdata_i)
rm(cdata_i)
write.csv(cdata, file = file.path(dir_save, paste0("Full_dataset_", script.version, ".csv")), row.names = FALSE)
mdata <- NULL
mdata_i <- tidy(raw_dataE)
mdata_i <- mdata_i %>%
mutate(value = 2 ^ value)
names(mdata_i)[1] <- "gene_name"
names(mdata_i)[2] <- "ID"
mdata_i <- left_join(mdata_i, conditions)
mdata_i$measurement <- "raw_signal_sum"
mdata <- bind_rows(mdata, mdata_i)
rm(mdata_i)
mdata_i <- tidy(batchcl_raw_dataE)
mdata_i <- mdata_i %>%
mutate(value = 2 ^ value)
names(mdata_i)[1] <- "gene_name"
names(mdata_i)[2] <- "ID"
mdata_i <- left_join(mdata_i, conditions)
mdata_i$measurement <- "batchcl_raw_signal_sum"
mdata <- bind_rows(mdata, mdata_i)
rm(mdata_i)
mdata_i <- tidy(norm_batchcl_raw_dataE)
mdata_i <- mdata_i %>%
mutate(value = 2 ^ value)
names(mdata_i)[1] <- "gene_name"
names(mdata_i)[2] <- "ID"
mdata_i <- left_join(mdata_i, conditions)
mdata_i$measurement <- "norm_batchcl_raw_signal_sum"
mdata <- bind_rows(mdata, mdata_i)
rm(mdata_i)
mdata_i <- tidy(ctrl.ratio_dataE)
mdata_i <- mdata_i %>%
mutate(value = 2 ^ value)
names(mdata_i)[1] <- "gene_name"
names(mdata_i)[2] <- "ID"
mdata_i <- left_join(mdata_i, conditions)
mdata_i$measurement <- "ctrl.ratio"
mdata <- bind_rows(mdata, mdata_i)
rm(mdata_i)
mdata$condition <- factor(mdata$condition, ordered = TRUE, levels = c("Larvae", "PrimaryPolyp", "Adult"))
mdata$measurement <- factor(mdata$measurement, ordered = TRUE, levels = c("raw_signal_sum", "batchcl_raw_signal_sum", "norm_batchcl_raw_signal_sum", "ctrl.ratio"))
ggplot(data = subset(mdata, !grepl("ratio", measurement)), aes(condition, log2(value))) +
geom_boxplot(aes(fill = rep)) +
customPlot +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
facet_grid(. ~ measurement)
ggsave(file.path(dir_save, paste0("Normalization_overview_", script.version, ".pdf")), width = 10, height = 5)
ggplot(data = subset(mdata, grepl("ratio", measurement)), aes(condition, log2(value))) +
geom_boxplot(aes(fill = rep)) +
customPlot +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
facet_grid(. ~ measurement, scale = "free")
ggsave(file.path(dir_save, paste0("Normalization_overview_ratios_", script.version, ".pdf")), width = 6, height = 5)
limma_results <- NULL
limma_data <- norm_batchcl_raw_dataE
limma_weights <- exprs(raw_dataE)
comparison.list <- c("Larvae - Adult", "PrimaryPolyp - Adult", "(Larvae - Adult) - (PrimaryPolyp - Adult)")
limma_weights <- ifelse(is.na(limma_weights), 0.05, 1)
limma.cond <- factor(pData(limma_data)$condition, ordered = FALSE)
limma.rep <- factor(pData(limma_data)$rep, ordered = FALSE)
contrast.matrix <- model.matrix( ~  0 + limma.cond + limma.rep)
colnames(contrast.matrix) <- gsub("limma.cond", "", colnames(contrast.matrix))
limma.object <- eBayes(
contrasts.fit(
lmFit(limma_data, design = contrast.matrix, weights = limma_weights),
makeContrasts(contrasts = comparison.list, levels = contrast.matrix)
)
)
for (comparison in comparison.list)
{
limma_results_i <- limma::topTable(limma.object,
sort.by = "t",
coef = comparison,
number = Inf)
names(limma_results_i)[grep("P.Value", names(limma_results_i))] <- "pvalue.limma"
names(limma_results_i)[grep("adj.P.Val", names(limma_results_i))] <- "fdr.limma"
limma_results_i <- subset(limma_results_i, !is.na(logFC))
fdr_res <- NULL
try(fdr_res <- fdrtool(limma_results_i$t, plot = FALSE, verbose = FALSE))
if (!is.null(fdr_res))
{
limma_results_i$pvalue.fdrtool <- fdr_res$pval
limma_results_i$qval.fdrtool <- fdr_res$qval
limma_results_i$lfdr.fdrtool <- fdr_res$lfdr
}else
{
limma_results_i$pvalue.fdrtool <- 1
limma_results_i$qval.fdrtool <- 1
limma_results_i$lfdr.fdrtool <- 1
}
limma_results_i$comparison <- comparison
limma_results <- bind_rows(limma_results, limma_results_i)
rm(limma_results_i, fdr_res)
}
rm(comparison.list, comparison, contrast.matrix, limma.cond, limma.rep, limma_data, limma_weights, limma.object)
ggplot(data = limma_results, aes(abs(t))) +
geom_line(aes(y = fdr.limma, colour = "limma - adj.P.Val")) +
geom_line(aes(y = qval.fdrtool, colour = "fdrtool - qval")) +
geom_point(aes(y = fdr.limma, colour = "limma - adj.P.Val")) +
geom_point(aes(y = qval.fdrtool, colour = "fdrtool - qval")) +
facet_wrap( ~ comparison, scale = "free_x") +
ylab("fdr") +
customPlot
ggsave(file.path(dir_save, paste0("t_vs_fdr_limma_vs_fdrtool_", script.version, ".pdf")), width = 12, height = 4.5)
ggplot(data = limma_results) +
geom_histogram(aes(pvalue.limma, alpha = 0.5, fill = "limma"), bins = 40) +
geom_histogram(aes(pvalue.fdrtool, alpha = 0.5, fill = "fdrtool"), bins = 40) +
guides(alpha = FALSE) +
xlab("p-value") +
facet_wrap( ~ comparison, scale = "free_y") +
coord_cartesian(xlim = c(0, 1)) +
customPlot
ggsave(file.path(dir_save, paste0("p-value_histogram_limma_vs_fdrtool_", script.version, ".pdf")), width = 12, height = 4.5)
limma_results$hit_annotation_method <- NA
fdr_hit_threshold <- 0.05
fdr_candidate_threshold = 0.2
fc_hit_threshold <- 2
fc_candidate_threshold <- 1.5
limma_results$pvalue <- NA
limma_results$fdr <- NA
for (comparison in unique(limma_results$comparison))
{
limma_hits <-
nrow(limma_results[limma_results$comparison == comparison &
limma_results$fdr.limma <= fdr_hit_threshold, ])
fdrtool_hits <-
nrow(limma_results[limma_results$comparison == comparison &
limma_results$qval.fdrtool <= fdr_hit_threshold, ])
if (limma_hits >= fdrtool_hits)
{
limma_results$hit_annotation_method[limma_results$comparison == comparison] <-
"limma"
}
if (fdrtool_hits > limma_hits)
{
limma_results$hit_annotation_method[limma_results$comparison == comparison] <-
"fdrtool"
}
rm(limma_hits, fdrtool_hits)
}
rm(comparison)
table(limma_results$hit_annotation_method)
limma_results$hit_annotation_method <- "limma"
limma_results$pvalue[limma_results$hit_annotation_method == "limma"] <-
limma_results$pvalue.limma[limma_results$hit_annotation_method == "limma"]
limma_results$fdr[limma_results$hit_annotation_method == "limma"] <-
limma_results$fdr.limma[limma_results$hit_annotation_method == "limma"]
limma_results$pvalue[limma_results$hit_annotation_method == "fdrtool"] <-
limma_results$pvalue.fdrtool[limma_results$hit_annotation_method == "fdrtool"]
limma_results$fdr[limma_results$hit_annotation_method == "fdrtool"] <-
limma_results$qval.fdrtool[limma_results$hit_annotation_method == "fdrtool"]
limma_results$hit <-
with(limma_results, ifelse(fdr <= fdr_hit_threshold & abs(logFC) >=
log2(fc_hit_threshold), TRUE, FALSE))
limma_results$hit_annotation <-
with(limma_results,
ifelse(fdr <= fdr_hit_threshold & abs(logFC) >=
log2(fc_hit_threshold), "hit",
ifelse(fdr <= fdr_candidate_threshold & abs(logFC) >=
log2(fc_candidate_threshold), "candidate", "no hit")))
limma_results$hit_annotation <-
factor(limma_results$hit_annotation,
ordered = TRUE,
levels = c("hit", "candidate", "no hit"))
with(limma_results, table(comparison, hit_annotation))
ecm_subset <- scan("ecm_subset.csv", character(), quote = "")
ggplot(data = limma_results, aes(logFC, -log10(pvalue), colour = hit_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results, hit_annotation != "no hit"),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("log2(fold change)") +
customPlot
ggsave(file.path(dir_save, paste0("Volcano_plot_", script.version, ".pdf")), width = 12, height = 4.5)
#Adding new annotations to limma results that reflect the ecm subset and background
limma_results$subset_annotation <- limma_results$hit_annotation #copy hit annotations into a new column
levels(limma_results$subset_annotation) <- c(levels(limma_results$subset_annotation) ,"background") #adds background to levels
limma_results[!limma_results$gene_name %in% ecm_subset,]$subset_annotation <- "background" # sets all that is not in the subset to "background"
ggplot(data = limma_results, aes(logFC, -log10(pvalue), colour = subset_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results[limma_results$gene_name %in% ecm_subset,], hit_annotation != "no hit"), #only show names of subset protein hits and candidates
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("log2(fold change)") +
theme_bw(base_size = 12) +
scale_color_manual(values = c("red", "orange", "green", "grey"))
ggsave(file.path(dir_save, paste0("subset_Volcano_plot_", script.version, ".pdf")), width = 12, height = 4.5)
ggplot(data = limma_results, aes(AveExpr, logFC, colour = hit_annotation)) +
geom_hline(aes(yintercept = 0)) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results, hit_annotation != "no hit"),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("average log2(signal_sum)") +
ylab("log2(fold change)") +
customPlot
ggsave(file.path(dir_save, paste0("MA_plot_", script.version, ".pdf")), width = 12, height = 4.5)
limma_results$top3 <- limma_results$average.top3
ggplot(data = limma_results, aes(top3, logFC, colour = hit_annotation)) +
geom_hline(aes(yintercept = 0)) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results, hit_annotation != "no hit"),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("average(top3)") +
ylab("log2(fold change)") +
customPlot
ggsave(file.path(dir_save, paste0("top3_plot_", script.version, ".pdf")), width = 12, height = 4.5)
FC.correlation.list <- list(
structure(
c("(Larvae - Adult) - (PrimaryPolyp - Adult)", "Larvae - Adult", "PrimaryPolyp - Adult"),
.Names = c("Larvae.Adult_against_PrimaryPolyp.Adult", "Larvae.Adult", "PrimaryPolyp.Adult")
)
)
fc.cor.data <- NULL
for (i in seq_along(FC.correlation.list))
{
FC.correlation.list_i <- FC.correlation.list[[i]]
fc.cor.data_x <- limma_results %>%
group_by(gene_name) %>%
dplyr::filter(comparison == FC.correlation.list_i[3]) %>%
mutate(x.name = names(FC.correlation.list_i)[3], x = logFC, x.hit = hit_annotation) %>%
dplyr::select(gene_name, x, x.name, x.hit)
fc.cor.data_y <- limma_results %>%
group_by(gene_name) %>%
dplyr::filter(comparison == FC.correlation.list_i[2]) %>%
mutate(y.name = names(FC.correlation.list_i)[2], y = logFC, y.hit = hit_annotation) %>%
dplyr::select(gene_name, y, y.name, y.hit)
fc.cor.data_i <- left_join(fc.cor.data_x, fc.cor.data_y)
fc.cor.data_hit <- limma_results %>%
group_by(gene_name) %>%
dplyr::filter(comparison == FC.correlation.list_i[1]) %>%
mutate(comparison = names(FC.correlation.list_i)[1]) %>%
dplyr::select(gene_name, comparison, hit_annotation)
fc.cor.data_i <- left_join(fc.cor.data_i, fc.cor.data_hit)
rm(fc.cor.data_x, fc.cor.data_y, fc.cor.data_hit)
fc.cor.data <- bind_rows(fc.cor.data, fc.cor.data_i)
rm(fc.cor.data_i)
}
fc.cor.data$hit_x_and_y <- paste(fc.cor.data$x.hit, "x -", fc.cor.data$y.hit, "y")
fc.cor.data$hit_x_and_y <- gsub("enriched ", "", fc.cor.data$hit_x_and_y)
fc.cor.data$hit_x_and_y <- factor(fc.cor.data$hit_x_and_y, ordered = TRUE,
levels = c("hit x - hit y",
"hit x - candidate y",
"candidate x - hit y",
"candidate x - candidate y",
"hit x - no hit y",
"no hit x - hit y",
"candidate x - no hit y",
"no hit x - candidate y",
"no hit x - no hit y"))
no.of.comparisons <- with(fc.cor.data, length(unique(paste(comparison))))
gr.width <- 4 + ceiling(sqrt(no.of.comparisons)) * 5
gr.height <- 3 + floor(sqrt(no.of.comparisons)) * 5
ggplot(data = fc.cor.data, aes(x, y, colour = hit_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
geom_abline() +
coord_fixed(ratio = 1) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(fc.cor.data, hit_annotation != "no hit"),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + x.name + y.name, labeller = "label_both") +
customPlot
ggsave(file.path(dir_save, paste0("Fold_change_correlation_", script.version, ".pdf")), width = gr.width, height = gr.height)
ggplot(data = fc.cor.data, aes(x, y, colour = hit_x_and_y)) +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
geom_abline() +
coord_fixed(ratio = 1) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(fc.cor.data, x.hit %in% c("hit") | y.hit %in% c("hit")),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + x.name + y.name, labeller = "label_both") +
customPlot
ggsave(file.path(dir_save, paste0("Fold_change_correlation_alt_hit_class_", script.version, ".pdf")), width = gr.width, height = gr.height)
write.csv(fc.cor.data, file = file.path(dir_save, paste0("Fold_change_correlation_data_", script.version, ".csv")), row.names = FALSE)
rm(FC.correlation.list, gr.width, gr.height)
write.csv(limma_results, file.path(dir_save, paste0("Limma_results_", script.version, ".csv")), row.names = FALSE)
hits <- unique(subset(limma_results, hit_annotation %in% c("hit", "candidate"))$gene_name)
m_clust.data <- subset(mdata, measurement == "ctrl.ratio" & gene_name %in% hits) %>%
group_by(gene_name, condition) %>%
summarise(median.value = median(value, na.rm = TRUE))
clust.data_m <- m_clust.data %>%
mutate(key = paste(condition, sep = "_")) %>%
ungroup() %>%
dplyr::select(gene_name, key, median.value) %>%
group_by(gene_name) %>%
spread(key = key, value = median.value) %>%
as.data.frame()
rownames(clust.data_m) <- clust.data_m$gene_name
m_clust.data <- m_clust.data %>%
dplyr::filter(gene_name %in% clust.data_m$gene_name)
clust.data_m$gene_name <- NULL
clust.data_m <- clust.data_m %>%
as.matrix() %>%
log2()
clust.data_m[is.na(clust.data_m)] <- 0
clust.data_PCA <- prcomp(clust.data_m, scale = FALSE)
perc_var <-
round(100 * clust.data_PCA$sdev ^ 2 /
sum(clust.data_PCA$sdev ^ 2), 1)
PCA_clust.data <-
data.frame(PC1 = clust.data_PCA$x[, 1],
PC2 = clust.data_PCA$x[, 2],
PC3 = clust.data_PCA$x[, 3])
ggplot(data = PCA_clust.data, aes(PC1, PC2, colour = PC3)) +
geom_point() +
theme_bw(base_size = 12) +
scale_colour_gradientn(colours = c("black", "#377eb8", "#984ea3",
"#e41a1c", "#ff7f00", "#ffff33")) +
ggtitle("PCA clustering data",
subtitle = paste("PC3 - explaining", perc_var[3], "% of variability")) +
xlab(paste("PC1 - explaining", perc_var[1], "% of variability")) +
ylab(paste("PC2 - explaining", perc_var[2], "% of variability"))
ggsave(file.path(dir_save, paste0("PCA_clustering_data_", script.version, ".pdf")),
width = 7, height = 5)
rm(clust.data_PCA, perc_var)
cluster.number <- ceiling(sqrt(sqrt(nrow(clust.data_m)) * ncol(clust.data_m)))
# plot within groups sum of squares for different cluster numbers
no <- ceiling(nrow(clust.data_m) / 4)
wss <- (no - 1) * sum(apply(clust.data_m, 2, var))
for (i in 2:(no - 1)) wss[i] <- sum(kmeans(clust.data_m,
centers = i)$withinss)
plot(1:(no - 1), wss, type = "b", xlab = "number of Clusters",
ylab = "within groups sum of squares")
abline(v = cluster.number, col = "red")
kmeans.fit <- kmeans(clust.data_m, cluster.number)
cluster.groups <- data.frame(gene_name = names(kmeans.fit$cluster),
kmeans.cluster.group = kmeans.fit$cluster)
rm(wss, kmeans.fit, no)
d <- dist(clust.data_m, method = "euclidean")
hclust.fit <- hclust(d, method = "ward.D2")
cluster.groups_hclust <-
data.frame(gene_name = names(cutree(hclust.fit, k = cluster.number)),
hclust.cluster.group = cutree(hclust.fit, k = cluster.number))
cluster.groups <- left_join(cluster.groups, cluster.groups_hclust)
rm(cluster.groups_hclust)
m_clust.data <- left_join(m_clust.data, cluster.groups)
m_clust.data$gene_name <- factor(m_clust.data$gene_name, ordered = TRUE,
levels = hclust.fit$labels[hclust.fit$order])
rm(d, hclust.fit)
gr.width <- 2.5 + ncol(clust.data_m) * 0.1 + max(nchar(rownames(clust.data_m))) * 0.008
gr.height <- 2.5 + nrow(clust.data_m) * 0.01
ggplot(data = m_clust.data, aes(condition, gene_name)) +
geom_tile(aes(fill = log2(median.value))) +
scale_fill_gradient2(low = "#2166ac", high = "#b2182b", midpoint = 0,
mid = "#f7f7f7", name = "log2.ratio") +
theme_bw(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.text.y = element_text(size = 1)) +
ylab("gene")
ggsave(file.path(dir_save, paste0("Heatmap_hits_", nrow(clust.data_m), "_proteins_", script.version, ".pdf")), width = gr.width, height = gr.height)
# Clustering heatmaps
ggplot(data = cluster.groups, aes(hclust.cluster.group, kmeans.cluster.group)) +
geom_abline(colour = "grey") +
geom_jitter(width = 0.2, height = 0.2, alpha = 0.3) +
scale_x_continuous(breaks = 1:cluster.number) +
scale_y_continuous(breaks = 1:cluster.number) +
customPlot +
theme(panel.grid.minor = element_blank())
# PCA with cluster results
m_cluster.groups <- cluster.groups %>%
group_by(gene_name) %>%
gather(-gene_name, key = "cluster.group", value = "cluster") %>%
mutate(cluster.group = gsub(".cluster.group", "", cluster.group))
PCA_clust.data$gene_name <- rownames(PCA_clust.data)
PCA_clust.data <- left_join(PCA_clust.data, m_cluster.groups)
PCA_clust.data$cluster <- factor(PCA_clust.data$cluster)
ggplot(data = PCA_clust.data, aes(PC1, PC2, colour = cluster)) +
geom_point() +
theme_bw(base_size = 12) +
facet_wrap(~ cluster.group) +
geom_text(aes(label = gene_name), size = 0.2, colour = "black")
ggsave(file.path(dir_save, paste0("PCA_clustering_data_", cluster.number, "_cluster_", nrow(clust.data_m), "_proteins_", script.version, ".pdf")),
width = 10, height = 5)
gr.height <- 2.5 + nrow(clust.data_m) * 0.01 + cluster.number * 0.1
ggplot(data = m_clust.data, aes(condition, gene_name)) +
geom_tile(aes(fill = log2(median.value))) +
scale_fill_gradient2(low = "#2166ac", high = "#b2182b", midpoint = 0,
mid = "#f7f7f7", name = "log2.ratio") +
facet_grid(hclust.cluster.group ~ ., scale = "free", space = "free") +
theme_bw(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.text.y = element_text(size = 1)) +
ylab("gene") +
ggtitle("hierarchical clustering")
ggsave(file.path(dir_save, paste0("Clustering_heatmap_hits_hclust_", cluster.number, "_cluster_", nrow(clust.data_m), "_proteins_", script.version, ".pdf")),
width = gr.width, height = gr.height)
ggplot(data = m_clust.data, aes(condition, gene_name)) +
geom_tile(aes(fill = log2(median.value))) +
scale_fill_gradient2(low = "#2166ac", high = "#b2182b", midpoint = 0,
mid = "#f7f7f7", name = "log2.ratio") +
facet_grid(kmeans.cluster.group ~ ., scale = "free", space = "free") +
theme_bw(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.text.y = element_text(size = 1)) +
ylab("gene") +
ggtitle("kmeans clustering")
ggsave(file.path(dir_save, paste0("Clustering_heatmap_hits_kmeans_", cluster.number, "_cluster_", nrow(clust.data_m), "_proteins_", script.version, ".pdf")),
width = gr.width, height = gr.height)
# Line plots
gr.width <- 4 + ceiling(sqrt(cluster.number)) * 3
gr.height <- 2.5 + floor(sqrt(cluster.number)) * 3
ggplot(data = m_clust.data, aes(condition, log2(median.value))) +
geom_hline(yintercept = 0) +
geom_line(aes(group = paste(gene_name, hclust.cluster.group)), alpha = 0.1) +
stat_summary(fun.data = "mean_se", geom = "smooth", aes(group = paste(hclust.cluster.group))) +
facet_wrap(~ hclust.cluster.group) +
customPlot +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle("hierarchical clustering") +
ylab("log2(ratio)")
ggsave(file.path(dir_save, paste0("Clustering_line_plot_hclust_", cluster.number, "_cluster_", nrow(clust.data_m), "_proteins_", script.version, ".pdf")),
width = gr.width, height = gr.height)
ggplot(data = m_clust.data, aes(condition, log2(median.value))) +
geom_hline(yintercept = 0) +
geom_line(aes(group = paste(gene_name, kmeans.cluster.group)), alpha = 0.1) +
stat_summary(fun.data = "mean_se", geom = "smooth", aes(group = paste(kmeans.cluster.group))) +
facet_wrap(~ kmeans.cluster.group) +
customPlot +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle("kmeans clustering") +
ylab("log2(ratio)")
ggsave(file.path(dir_save, paste0("Clustering_line_plot_kmeans_", cluster.number, "_cluster_", nrow(clust.data_m), "_proteins_", script.version, ".pdf")),
width = gr.width, height = gr.height)
write.csv(cluster.groups, file.path(dir_save, paste0("Cluster_results_",cluster.number,"cluster_", nrow(clust.data_m), "_proteins_", script.version, ".csv")), row.names = FALSE)
rm(gr.width, gr.height)
save.image(file.path(dir_save, paste0("Workspace_", script.version, ".RData")))
# load(file.path(dir_save, paste0("Workspace_", script.version, ".RData")))
sessionInfo()
ecm_subset <- scan("ecm_subset.csv", character(), quote = "")
ggplot(data = limma_results, aes(logFC, -log10(pvalue), colour = hit_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results, hit_annotation != "no hit"),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("log2(fold change)") +
customPlot
ggsave(file.path(dir_save, paste0("Volcano_plot_", script.version, ".pdf")), width = 12, height = 4.5)
#Adding new annotations to limma results that reflect the ecm subset and background
limma_results$subset_annotation <- limma_results$hit_annotation #copy hit annotations into a new column
levels(limma_results$subset_annotation) <- c(levels(limma_results$subset_annotation) ,"background") #adds background to levels
limma_results[!limma_results$gene_name %in% ecm_subset,]$subset_annotation <- "background" # sets all that is not in the subset to "background"
ggplot(data = sorted_limma, aes(logFC, -log10(pvalue), colour = subset_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_point(data = subset(sorted_limma, subset_annotation == "background")) +
geom_point(data = subset(sorted_limma, subset_annotation == "no hit")) +
geom_point(data = subset(sorted_limma, subset_annotation == "candidate")) +
geom_point(data = subset(sorted_limma, subset_annotation == "hit")) +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results[limma_results$gene_name %in% ecm_subset,], hit_annotation != "no hit"), #only show names of subset protein hits and candidates
vjust = 0, nudge_y = 0.1, size = 0.2,color = "black", check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("log2(fold change)") +
theme_bw(base_size = 12) +
scale_color_manual(values = c("gray","orange","red","green"))
ecm_subset <- scan("ecm_subset.csv", character(), quote = "")
ggplot(data = limma_results, aes(logFC, -log10(pvalue), colour = hit_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_point() +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results, hit_annotation != "no hit"),
vjust = 0, nudge_y = 0.1, size = 2, check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("log2(fold change)") +
customPlot
ggsave(file.path(dir_save, paste0("Volcano_plot_", script.version, ".pdf")), width = 12, height = 4.5)
#Adding new annotations to limma results that reflect the ecm subset and background
limma_results$subset_annotation <- limma_results$hit_annotation #copy hit annotations into a new column
levels(limma_results$subset_annotation) <- c(levels(limma_results$subset_annotation) ,"background") #adds background to levels
limma_results[!limma_results$gene_name %in% ecm_subset,]$subset_annotation <- "background" # sets all that is not in the subset to "background"
sorted_limma <- limma_results[order(limma_results$subset_annotation),][order(nrow(limma_results):1),]
ggplot(data = sorted_limma, aes(logFC, -log10(pvalue), colour = subset_annotation)) +
geom_vline(aes(xintercept = 0)) +
geom_point(data = subset(sorted_limma, subset_annotation == "background")) +
geom_point(data = subset(sorted_limma, subset_annotation == "no hit")) +
geom_point(data = subset(sorted_limma, subset_annotation == "candidate")) +
geom_point(data = subset(sorted_limma, subset_annotation == "hit")) +
geom_text(aes(label = gsub("[|].+", "", gene_name)),
data = subset(limma_results[limma_results$gene_name %in% ecm_subset,], hit_annotation != "no hit"), #only show names of subset protein hits and candidates
vjust = 0, nudge_y = 0.1, size = 0.2,color = "black", check_overlap = TRUE) +
facet_wrap( ~ comparison + hit_annotation_method) +
xlab("log2(fold change)") +
theme_bw(base_size = 12) +
scale_color_manual(values = c("gray","orange","red","green"))
ggsave(file.path(dir_save, paste0("subset_Volcano_plot_", script.version, ".pdf")), width = 12, height = 4.5)
